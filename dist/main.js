"use strict";function findSources(e){return e.find(FIND_SOURCES)}function assignSpot(e){for(var r in Memory.rooms[e.room.name].sources)if(Memory.rooms[e.room.name].lastAssignedSource!=r)for(var o in Memory.rooms[e.room.name].sources[r].spots){if(!Game.getObjectById(Memory.rooms[e.room.name].sources[r].spots[o]))return Memory.rooms[e.room.name].sources[r].spots[o]=e.id,Memory.rooms[e.room.name].lastAssignedSource=r,r;if(e.memory.priority>Game.getObjectById(Memory.rooms[e.room.name].sources[r].spots[o]).memory.priority)return Game.getObjectById(Memory.rooms[e.room.name].sources[r].spots[o]).suicide(),Memory.rooms[e.room.name].sources[r].spots[o]=e.id,Memory.rooms[e.room.name].lastAssignedSource=r,r}return e.pos.findClosestByRange(FIND_SOURCES).id}function spawnCreep(e,r,o){switch(e.createCreep(r.parts[o],Game.time,r.options)){case-1:console.log("You do not own the spawn being told to create a creep");break;case-3:console.log("There is already a creep with this name");break;case-4:console.log("Spawn is already spawning  creep");break;case-6:console.log("Not enough energy to spawn creep");break;case-10:console.log("Body part array not properly formed: "),console.log(JSON.stringify(r.parts[o]));break;case-14:console.log("RCL no longer sufficient to use this spawn")}}function gatherAura(e){var r=e.pos.findInRange(FIND_DROPPED_RESOURCES,1,{filter:function(e){return e.resourceType==RESOURCE_ENERGY}}),o=e.pos.findInRange(FIND_STRUCTURES,1,{filter:function(e){return e.structureType==STRUCTURE_CONTAINER}}),t=e.pos.findInRange(FIND_STRUCTURES,1,{filter:function(e){return e.structureType==STRUCTURE_STORAGE}});"newt"!=e.memory.role&&"toad"!=e.memory.role&&0===e.withdraw(t[0],RESOURCE_ENERGY)&&e.say("shinies"),"toad"!=e.memory.role&&0===e.withdraw(o[0],RESOURCE_ENERGY)&&e.say("shinies"),0===e.pickup(r[0])&&e.say("shinies")}function depositAura(e){var r=e.pos.findInRange(FIND_MY_STRUCTURES,1,{filter:function(e){return e.structureType==STRUCTURE_EXTENSION}});for(var o in r)0===e.transfer(r[o],RESOURCE_ENERGY)&&e.say("teehee")}function frog(e){0===e.carry.energy?(e.act("eat"),e.act("harvest"),e.act("withdraw")):e.carry.energy===e.carryCapacity&&(e.act("eat"),e.act("upgradeController"),e.act("repair"),e.act("build"))}function newt(e){0===e.carry.energy?(e.act("withdraw"),e.act("pickup")):e.carry.energy===e.carryCapacity&&(e.act("eat"),e.act("transfer"))}function initialize(e){Memory.rooms[e.name]={},Memory.rooms[e.name].sc||(Memory.rooms[e.name].sc=e.find(FIND_SOURCES).length),Memory.rooms[e.name].pc||(Memory.rooms[e.name].pc=3e3*Memory.rooms[e.name].sc),Memory.rooms[e.name].pt||(Memory.rooms[e.name].pt=Math.ceil(Memory.rooms[e.name].pc/300)),Memory.rooms[e.name].jobs||(Memory.rooms[e.name].jobs={attack:{workers:{},tasks:{},assignment:{}},build:{workers:{},tasks:{},assignment:{}},transfer:{workers:{},tasks:{},assignment:{}},withdraw:{workers:{},tasks:{},assignment:{}},heal:{workers:{},tasks:{},assignment:{}},repair:{workers:{},tasks:{},assignment:{}},pickup:{workers:{},tasks:{},assignment:{}},harvest:{workers:{},tasks:{},assignment:{}},eat:{workers:{},tasks:{},assignment:{}},upgradeController:{workers:{},tasks:{},assignment:{}}}),Memory.rooms[e.name].miningSpots||(Memory.rooms[e.name].miningSpots=e.miningSpots(e.find(FIND_SOURCES)))}function queen(e){var r=e.room;Memory.rooms[r.name]||(initialize(r),Memory.rooms[r.name].jobs.transfer.tasks[e.id]=e.id,Memory.rooms[r.name].jobs.eat.tasks[e.id]=e.id,Memory.rooms[r.name].jobs.upgradeController.tasks[r.controller.id]=r.controller.id);var o=r.controller.level,t=(Memory.recipes.frog,Memory.recipes.toad);Memory.recipes.newt;r.roleCount("toad")<r.memory.sc&&spawnCreep(e,t,o)}function toad(e){0===e.carry.energy?(e.act("eat"),e.act("harvest")):e.carry.energy>0&&(e.act("build"),e.act("upgradeController"),e.act("harvest"))}function tower(e){var r=e.pos.findInRange(FIND_HOSTILE_CREEPS,15);Memory.towers[e.id]||(Memory.towers[e.id]={}),Memory.towers[e.id].mode||(Memory.towers[e.id].mode="alert"),e.energy<=900||r.length>0?Memory.towers[e.id].mode="alert":e.energy>900&&(Memory.towers[e.id].mode="repair");var o=Memory.towers[e.id].mode;if("alert"==o){var t=e.room.find(FIND_MY_CREEPS,{filter:function(e){return e.hits<e.hitsMax}});r.length>0?(r.length>1&&r.sort(function(e,r){return e.hits-r.hits}),e.attack(r[0])):t.length>0&&(t.length>1&&t.sort(function(e,r){return e.hits-r.hits}),e.heal(t[0]))}else if("repair"==o){var s=e.room.find(FIND_STRUCTURES,{filter:function(e){return e.hitsMax/2>e.hits&&e.hits<1e5}});s.length>0&&(s.length>1&&s.sort(function(e,r){return e.hits-r.hits}),e.repair(s[0]))}else r.length>0&&(r.length>1&&r.sort(function(e,r){return e.hits-r.hits}),e.attack(r[0]))}function eraseDead(){for(var e in Memory.creeps)Game.creeps[e]||delete Memory.creeps[e]}ConstructionSite.prototype.debrief=function(){delete this.room.memory.jobs.build.tasks[this.id]},StructureContainer.prototype.report=function(){this.store.energy>0&&(this.room.memory.jobs.withdraw.tasks[this.id]=this.energy)},StructureContainer.prototype.debrief=function(){0===this.store.energy&&delete this.room.memory.withdraw.tasks[this.id]},StructureController.prototype.debrief=function(){return!0},Creep.prototype.assignTask=function(e){var r=Object.keys(this.room.memory.jobs[e].tasks);this.room.memory.jobs[e].workers[this.id]||(this.room.memory.jobs[e].workers[this.id]=this.id);var o=Object.keys(this.room.memory.jobs[e].workers);if(!r.length)return null;if(console.log("we have "+o.length+" workers and "+r.length+" "+e+" jobs to do"),o.length>r.length){console.log("we have more workers than jobs");for(var t=0;t<o.length;t++)if(console.log(this.id+" being assigned at index "+t+" for worker value "+this.room.memory.jobs[e].workers[o[t]]),this.id==this.room.memory.jobs[e].workers[o[t]])return r[t]?(console.log("creep with id "+this.id+" being assigned to a "+r[t]+" at index "+t),this.room.memory.jobs[e].assignment[this.id]=r[t],this.room.memory.jobs[e].assignment[this.id]):(console.log("creep with id "+this.id+" being assigned to b "+r[r.length-1]+" at index "+t),this.room.memory.jobs[e].assignment[this.id]=r[r.length-1],this.room.memory.jobs[e].assignment[this.id])}else{console.log("we have more jobs than workers");for(var s=0;s<o.length;s++)if(this.id==this.room.memory.jobs[e].workers[o[s]])return this.room.memory.jobs[e].assignment[this.id]=this.room.memory.jobs[e].tasks[r[s]],console.log("creep with id "+this.id+" being assigned to "+r[s]+" at index "+s),this.room.memory.jobs[e].assignment[o[s]]}},Creep.prototype.act=function(e){Game.getObjectById(this.memory[e].id)||(console.log("can not instantiate target object for "+e),this.memory[e].id=this.assignTask(e));var r=Game.getObjectById(this.memory[e]);switch(console.log("creep attempting to "+e+" with "+this[e](r)),this[e](r)){case 0:return this.say("ribbit",!0),r.debrief(),!0;case-1:console.log("You do not own the creep being told to "+e);break;case-4:this.say("Spawning",!1);break;case-6:this.say("Empty",!1);break;case-7:this.say("Bad Target",!1),this.memory[e]=this.assignTask(e);break;case-9:this.moveByPath(creep.memory[e].path);break;case-12:this.say("¯\\_(ツ)_/¯",!1)}},Creep.prototype.eat=function(e){return e.renewCreep(this)},Creep.prototype.sacrifice=function(e){return e.recycleCreep(this)},StructureExtension.prototype.report=function(){this.energy<this.energyCapacity&&(this.room.memory.jobs.transfer.tasks[this.id]=this.energy)},StructureExtension.prototype.debrief=function(){this.energy===this.energyCapacity&&delete this.room.memory.jobs.transfer.tasks[this.id]},OwnedStructure.prototype.healthCheck=function(){object.hitsMax/2>object.hits&&object.hits<1e4&&(this.room.memory.jobs.repair.tasks[this.id]=this.hits)},OwnedStructure.prototype.discharge=function(){this.room.memory.repair[this.id]&&delete this.room.memory.jobs.repair.tasks[this.id]},Resource.prototype.report=function(){this.room.memory.jobs.pickup.tasks[this.id]=this.amount},Room.prototype.roleCount=function(e){return this.find(FIND_MY_CREEPS,{filter:function(r){return r.memory.role==e}}).length},Room.prototype.miningSpots=function(e){var r=this,o=0,t=[];return e.forEach(function(e){var s=e.id;t=r.lookForAtArea("terrain",e.pos.y-1,e.pos.x-1,e.pos.y+1,e.pos.x+1,!0);for(var i=0;i<t.length;i++)"plain"!=t[i].terrain&&"swamp"!=t[i].terrain||(o++,Memory.rooms[r.name].sources||(Memory.rooms[r.name].sources={}),Memory.rooms[r.name].sources[s]||(Memory.rooms[r.name].sources[s]={},Memory.rooms[r.name].jobs.harvest.tasks[s]=s),Memory.rooms[r.name].sources[s].spots||(Memory.rooms[r.name].sources[s].spots={}),Memory.rooms[r.name].sources[s].spots[o]||(Memory.rooms[r.name].sources[s].spots[o]="empty"))}),o},Source.prototype.debrief=function(){return!0},StructureSpawn.prototype.report=function(){this.energy<this.energyCapacity&&(this.room.memory.jobs.transfer.tasks[this.id]=this.energy)},StructureSpawn.prototype.debrief=function(){this.energy===this.energyCapacity&&delete this.room.memory.jobs.transfer.tasks[this.id]},StructureStorage.prototype.report=function(){this.store.energy>0&&(this.room.memory.jobs.withdraw.tasks[this.id]=this.energy)},StructureStorage.prototype.debrief=function(){0===this.store.energy&&delete this.room.memory.jobs.withdraw.tasks[this.id]},StructureTower.prototype.report=function(){this.energy<this.energyCapacity&&(this.room.memory.jobs.transfer.tasks[this.id]=this.energy)},StructureTower.prototype.debrief=function(){this.energy===this.energyCapacity&&delete this.room.memory.jobs.transfer.tasks[this.id]},Memory.recipes||(Memory.recipes={}),Memory.recipes.frog={parts:{1:[MOVE,CARRY,MOVE,WORK],2:[MOVE,CARRY,MOVE,WORK],3:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK],4:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK],5:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK],6:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK],7:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK],8:[MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK,MOVE,CARRY,MOVE,WORK]},options:{role:"frog",resourceType:RESOURCE_ENERGY}},Memory.recipes.newt={parts:{1:[MOVE,CARRY,MOVE,CARRY],2:[MOVE,CARRY,MOVE,CARRY],3:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY],4:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY],5:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY],6:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY],7:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY],8:[MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,MOVE,CARRY,CARRY,CARRY,CARRY,CARRY,CARRY,CARRY,CARRY,CARRY]},options:{role:"newt",resourceType:RESOURCE_ENERGY}},Memory.recipes.toad={parts:{1:[MOVE,WORK,CARRY,WORK],2:[MOVE,WORK,CARRY,WORK],3:[MOVE,WORK,WORK,MOVE,WORK,WORK,CARRY],4:[MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,CARRY],5:[MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,CARRY],6:[MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,CARRY],7:[MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,CARRY],8:[MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,WORK,WORK,MOVE,CARRY]},options:{role:"toad",resourceType:RESOURCE_ENERGY}},eraseDead(),module.exports.loop=function(){for(var e in Game.ConstructionSites)this.room.memory.jobs.build.tasks[e]=e;for(var r in Game.structures){var o=Game.structures[r];switch(o.structureType){case"spawn":o.memory.queen&&queen(o),o.report();break;case"extension":case"container":case"storage":o.report();break;case"tower":tower(o),o.report()}}for(var t in Game.creeps){var s=Game.creeps[t];switch(s.memory.role){case"redspawn":redspawn(s);break;case"tadpole":tadpole(s);break;case"frog":frog(s);break;case"toad":toad(s);break;case"newt":newt(s);break;case"squatter":squatter(s);break;case"poliwog":poliwog(s)}}};